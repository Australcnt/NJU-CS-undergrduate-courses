【需要提交的作业（ OJ 提交 ）】

Ex1. 编程求一个一维int型数组的第k大的数。

Ex2. 假设一维int型数组中的N个元素按从小到大的顺序排列，编写函数，“删除”其中的重复元素，返回重复元素个数n，并在主调函数中输出前N-n个元素。例如，对于一维数组{1, 1, 2, 3, 3, 3, 4, 5, 6, 6}，函数执行后，数组为：{1, 2, 3, 4, 5, 6, 6, 6, 6, 6}，返回值是4，输出1, 2, 3, 4, 5, 6。

Ex3. 假设有一个数组x[]，它有n个元素，每一个都大于0；称x[0]+x[1]+…+x[i]为前置和，而x[j]+x[j+1]+…+x[n-1]为后置和。试编写一个程序，求出x[]中有多少组相同的前置和与后置和。例如，如果x[]的元素为3、6、2、1、4、5、2，则x[]的前置和有：3、9、11、12、16、21、23；后置和有：2、7、1、12、14、20、23；11、12、23这3对就是值相同的前置和与后置和，因为：11=3+6+2（前置和）=2+5+4（后置和），12=3+6+2+1（前置和）=2+5+4+1（后置和），23是整个数组元素的和。

Ex4. 编程实现用筛法求素数（首先假设所有的数从小到大排列在筛子中，然后，从最小的数开始依次将每个数的倍数从筛子中筛掉，最终筛子中剩下的数均为素数）。

【复习】
课件；教材第二章、5.1

【预习】
教材 5.2.1、5.2.3、5.2.4、5.5.1~5.5.3、5.5.5；

【阅读】《编码的奥秘》第21~22章

【训练】
1. 验证一维数组和二维数组的定义、初始化与输出方法。

2. 编程分别用数组和递归函数实现：输入一个正整数，输出其各位数字。例如，输入89532，输出8, 9, 5, 3, 2。

3. 分析程序执行结果，并上机验证（注意下标变化及赋值操作的作用）。
程序如下:
int b[][3] = {0, 2, 1, 1, 0, 2, 1, 2, 0};
for(int i=0; i <= 2; ++i)
	for(int j=0; j <= 2; ++j)
	{
		b[i][j] = b[b[i][j]][b[j][i]];
		printf("%d, ", b[i][j]);

	}

4. 编程实现从键盘输入一个N×N的矩阵，把它转置后输出。（说明：对矩阵进行转置就是交换二维数组中a[i][j]与a[j][i]的值。）

5. 调试、运行课件中的排序程序，并修改程序，实现数组的降序排列。

6. 编程用一维数组实现求第n个费波那契数。

7. 不引入新的数组，实现数组前m个元素与后n个元素交换位置的函数，其中m+n等于数组的长度，例如，设m为3，n为4，a中的数据为1 2 3 4 5 6 7，函数执行后，a中的数据为4 5 6 7 1 2 3。函数原型为：
void ArrSwap(int a[], int m, int n);

8. 十个小孩围成一圈分糖果，每个小孩分得的糖果数依次为：10、2、8、22、16、4、10、6、14、20。然后所有的小孩同时将自己手中的糖果分一半给右边的小孩；块数为奇数的人可向老师要一块。问需要几次这样的调整后，小孩手中糖果的块数就都一样了？每人有多少块糖果？编程求解上述问题。

9. 利用数组编程实现杨辉三角显示功能。

10. 编程输出一个N阶（N为大于1的奇数）幻方。即在一个由N×N个方格组成的方阵中，填入1、2、3、...、N2各个数，使得每一行、每一列及两个对角线上的数之和均相等。例如，表 22显示了一个3阶幻方：
表 22  三阶幻方
8	1	6
3	5	7
4	9	2
	（填数方法提示：把1填在第一行最中间的格子中，然后依次将下一个数填在上一个数的右上角格子中。如果目标格子在第一行的上方，则填入该列的最后一行格子中；如果目标格子在最后一列的右方，则填入该行的第一列格子中；如果目标格子已经被占用，则填入当前格子的下方格子中。）

11.（选做）八皇后问题：编程用空格符和Q模拟输出在国际象棋的棋盘上放置八个皇后，使得其中任何一个皇后所处的“行”、“列”及“对角线”上都不能有其他皇后。

12.（选做）设计2048游戏程序。（游戏规则：在一个4×4的棋盘上，初值除了有两个2之外，其余数字均为0；玩家每次可以选择上下左右一个方向，每选一个方向，所有的数字往所选择的方向移动一次；系统同时会在0位置随机出现一个2或4，相同的数字在相遇时会相加；玩家要想办法在这小小的16格范围中凑出一个整数"2048”。程序要按一定的评分规则给玩家打分，例如，初始化一个总分，每选择一次方向减1分，至游戏结束给出最后得分，或者每使得数字相加时得10分，至游戏结束给出最后得分。凑出“2048”或没有0位置且没有相邻数字相同时，游戏结束。）
