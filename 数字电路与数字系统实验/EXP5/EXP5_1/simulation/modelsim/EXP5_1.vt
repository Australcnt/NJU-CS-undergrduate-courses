// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/28/2020 16:53:08"
                                                                                
// Verilog Test Bench template for design : EXP5_1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module EXP5_1_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
wire clk_1s;
wire [24:0]  count_clk;
wire [6:0]  count_scd;
wire [6:0]  tens_HEX;
wire [3:0]  tens_digit;
wire [6:0]  units_HEX;
wire [3:0]  units_digit;

// assign statements (if any)                          
EXP5_1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_1s(clk_1s),
	.count_clk(count_clk),
	.count_scd(count_scd),
	.tens_HEX(tens_HEX),
	.tens_digit(tens_digit),
	.units_HEX(units_HEX),
	.units_digit(units_digit)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  clk = 0;
end

always
begin
  #1 clk = ~clk;  
// --> end                                             
//$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule

