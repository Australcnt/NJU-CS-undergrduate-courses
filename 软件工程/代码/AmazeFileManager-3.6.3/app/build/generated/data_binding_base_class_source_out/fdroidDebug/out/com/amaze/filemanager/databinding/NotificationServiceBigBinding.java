// Generated by view binder compiler. Do not edit!
package com.amaze.filemanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.amaze.filemanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class NotificationServiceBigBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView notificationServiceFilenameBig;

  @NonNull
  public final ProgressBar notificationServiceProgressBarBig;

  @NonNull
  public final TextView notificationServiceTextViewFilenameBig;

  @NonNull
  public final TextView notificationServiceTextViewTimeRemainingBig;

  @NonNull
  public final TextView notificationServiceTextViewTransferRateBig;

  @NonNull
  public final TextView notificationServiceTextViewWrittenBig;

  @NonNull
  public final TextView notificationServiceTimeRemainingBig;

  @NonNull
  public final TextView notificationServiceTransferRateBig;

  @NonNull
  public final TextView notificationServiceWrittenBig;

  private NotificationServiceBigBinding(@NonNull LinearLayout rootView,
      @NonNull TextView notificationServiceFilenameBig,
      @NonNull ProgressBar notificationServiceProgressBarBig,
      @NonNull TextView notificationServiceTextViewFilenameBig,
      @NonNull TextView notificationServiceTextViewTimeRemainingBig,
      @NonNull TextView notificationServiceTextViewTransferRateBig,
      @NonNull TextView notificationServiceTextViewWrittenBig,
      @NonNull TextView notificationServiceTimeRemainingBig,
      @NonNull TextView notificationServiceTransferRateBig,
      @NonNull TextView notificationServiceWrittenBig) {
    this.rootView = rootView;
    this.notificationServiceFilenameBig = notificationServiceFilenameBig;
    this.notificationServiceProgressBarBig = notificationServiceProgressBarBig;
    this.notificationServiceTextViewFilenameBig = notificationServiceTextViewFilenameBig;
    this.notificationServiceTextViewTimeRemainingBig = notificationServiceTextViewTimeRemainingBig;
    this.notificationServiceTextViewTransferRateBig = notificationServiceTextViewTransferRateBig;
    this.notificationServiceTextViewWrittenBig = notificationServiceTextViewWrittenBig;
    this.notificationServiceTimeRemainingBig = notificationServiceTimeRemainingBig;
    this.notificationServiceTransferRateBig = notificationServiceTransferRateBig;
    this.notificationServiceWrittenBig = notificationServiceWrittenBig;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NotificationServiceBigBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NotificationServiceBigBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.notification_service_big, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NotificationServiceBigBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.notification_service_filename_big;
      TextView notificationServiceFilenameBig = rootView.findViewById(id);
      if (notificationServiceFilenameBig == null) {
        break missingId;
      }

      id = R.id.notification_service_progressBar_big;
      ProgressBar notificationServiceProgressBarBig = rootView.findViewById(id);
      if (notificationServiceProgressBarBig == null) {
        break missingId;
      }

      id = R.id.notification_service_textView_filename_big;
      TextView notificationServiceTextViewFilenameBig = rootView.findViewById(id);
      if (notificationServiceTextViewFilenameBig == null) {
        break missingId;
      }

      id = R.id.notification_service_textView_timeRemaining_big;
      TextView notificationServiceTextViewTimeRemainingBig = rootView.findViewById(id);
      if (notificationServiceTextViewTimeRemainingBig == null) {
        break missingId;
      }

      id = R.id.notification_service_textView_transferRate_big;
      TextView notificationServiceTextViewTransferRateBig = rootView.findViewById(id);
      if (notificationServiceTextViewTransferRateBig == null) {
        break missingId;
      }

      id = R.id.notification_service_textView_written_big;
      TextView notificationServiceTextViewWrittenBig = rootView.findViewById(id);
      if (notificationServiceTextViewWrittenBig == null) {
        break missingId;
      }

      id = R.id.notification_service_timeRemaining_big;
      TextView notificationServiceTimeRemainingBig = rootView.findViewById(id);
      if (notificationServiceTimeRemainingBig == null) {
        break missingId;
      }

      id = R.id.notification_service_transferRate_big;
      TextView notificationServiceTransferRateBig = rootView.findViewById(id);
      if (notificationServiceTransferRateBig == null) {
        break missingId;
      }

      id = R.id.notification_service_written_big;
      TextView notificationServiceWrittenBig = rootView.findViewById(id);
      if (notificationServiceWrittenBig == null) {
        break missingId;
      }

      return new NotificationServiceBigBinding((LinearLayout) rootView,
          notificationServiceFilenameBig, notificationServiceProgressBarBig,
          notificationServiceTextViewFilenameBig, notificationServiceTextViewTimeRemainingBig,
          notificationServiceTextViewTransferRateBig, notificationServiceTextViewWrittenBig,
          notificationServiceTimeRemainingBig, notificationServiceTransferRateBig,
          notificationServiceWrittenBig);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
