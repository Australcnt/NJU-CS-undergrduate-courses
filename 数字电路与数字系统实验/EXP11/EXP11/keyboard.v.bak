module keyboard(clk, clrn, ready, data, nextdata_n, count, ascill, press, if_press, light_shift, light_ctrl, light_caps, special_char);
	input clk,clrn,ready;
	input [7:0] data;
	output reg nextdata_n;
	output reg [7:0] count = 0;
	output reg [7:0] ascill;
	reg [7:0] const;
	output reg [7:0] press;
	output reg if_press;
	output reg [3:0] special_char;
	output reg light_shift, light_ctrl, light_caps;
	wire [7:0] ans;
	
	rom myrom(data, ans);
	(* ram_init_file = "zero.mif" *) reg helper[255:0];
	
	
	reg [6:0] count_clk = 0;
	reg clk_my = 0;
	always @(posedge clk)
	begin
		if(count_clk == 100)
		begin
			count_clk <= 0;
			clk_my <= ~clk_my;
		end
		else
			count_clk <= count_clk + 1;
	end
	
	always @(*) 
	begin
		const = 8'hE0;
	end
	
	
	reg flag = 1;
	reg on = 1;
	reg if_shift = 0, if_caps = 0, if_ctrl = 0;
	always @(posedge clk_my)
	begin
		if (ready) begin
			if(data != 8'hf0 && flag)
			begin
				press <= data;
				if (helper[data] == 0) 
				begin
					helper[data] <= 1;
					count <= count + 1;
				end
				ascill <=  ans;
				if (ans >= 65 && ans <= 90 || ans >= 97 && ans <= 122) 
					if (if_caps ^ if_shift) ascill <= ans - 32; 
				if (ans >= 48 && ans <= 57) 
					if (if_shift) begin
					case (ans)
					48: ascill <= 41;
					49: ascill <= 33;
					50: ascill <= 64;
					51: ascill <= 35;
					52: ascill <= 36;
					53: ascill <= 37;
					54: ascill <= 94;
					55: ascill <= 38;
					56: ascill <= 42;
					57: ascill <= 40;
					endcase
					end
				flag <= 1;
				if_press <= 1;
				if (data == 8'h58) begin
					if (on) begin
						if_caps <= if_caps + 1;
						on <= 0;
					end
					special_char <= 7;
				end
				else if (data == 8'h12) begin 
					if_shift <= 1;
					special_char <= 7;
				end
				else if (data == 8'h14) begin 
					if_ctrl <= 1;
					special_char <= 7;
				end
				else if (data == 8'h66) 
					special_char <= 6;
				else if (data == 8'h5A) 
					special_char <= 5;
				else if (helper[const] == 1 && data == 8'h6B)
					special_char <= 1;
				else if (helper[const] == 1 && data == 8'h74)
				   special_char <= 4;
				else if (helper[const] == 1 && data == 8'h72)
					special_char <= 2;
				else if (helper[const] == 1 && data == 8'h75)
					special_char <= 3;
				else
					special_char <= 0;
			end
			else if (data == 8'hf0)
			begin
				press <= data;
				ascill <=  ans;
				flag <= 0;
				if_press <= 0;
			end
			else if(!flag)
			begin
				if (data == 8'h12) if_shift <= 0;
				if (data == 8'h14) if_ctrl <= 0;
				if (data == 8'h58) on <= 1;
				helper[data] <= 0;
				press <= data;
				ascill <=  ans;
				flag <= 1;
				if_press <= 0;

			end
			nextdata_n <= 0;
		end
		else begin
			nextdata_n <= 1;
		end
	end
	
	always @(*)
	begin
		light_shift <= if_shift;
		light_ctrl <= if_ctrl;
		light_caps <= if_caps;
	end
endmodule
