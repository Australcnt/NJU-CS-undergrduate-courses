// Generated by view binder compiler. Do not edit!
package com.amaze.filemanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.amaze.filemanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PropertiesImageBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView textViewImageApertureValueTitle;

  @NonNull
  public final TextView textViewImageCameraBrandTitle;

  @NonNull
  public final TextView textViewImageCameraModelTitle;

  @NonNull
  public final TextView textViewImageCreatorTitle;

  @NonNull
  public final TextView textViewImageDateModifiedTitle;

  @NonNull
  public final TextView textViewImageDateTakenTitle;

  @NonNull
  public final TextView textViewImageExposureTimeTitle;

  @NonNull
  public final TextView textViewImageFlashTitle;

  @NonNull
  public final TextView textViewImageFocalLengthTitle;

  @NonNull
  public final TextView textViewImageHeightTitle;

  @NonNull
  public final TextView textViewImageIsoTitle;

  @NonNull
  public final TextView textViewImageSoftwareTitle;

  @NonNull
  public final TextView textViewImageTypeTitle;

  @NonNull
  public final TextView textViewImageWidthTitle;

  private PropertiesImageBinding(@NonNull LinearLayout rootView,
      @NonNull TextView textViewImageApertureValueTitle,
      @NonNull TextView textViewImageCameraBrandTitle,
      @NonNull TextView textViewImageCameraModelTitle, @NonNull TextView textViewImageCreatorTitle,
      @NonNull TextView textViewImageDateModifiedTitle,
      @NonNull TextView textViewImageDateTakenTitle,
      @NonNull TextView textViewImageExposureTimeTitle, @NonNull TextView textViewImageFlashTitle,
      @NonNull TextView textViewImageFocalLengthTitle, @NonNull TextView textViewImageHeightTitle,
      @NonNull TextView textViewImageIsoTitle, @NonNull TextView textViewImageSoftwareTitle,
      @NonNull TextView textViewImageTypeTitle, @NonNull TextView textViewImageWidthTitle) {
    this.rootView = rootView;
    this.textViewImageApertureValueTitle = textViewImageApertureValueTitle;
    this.textViewImageCameraBrandTitle = textViewImageCameraBrandTitle;
    this.textViewImageCameraModelTitle = textViewImageCameraModelTitle;
    this.textViewImageCreatorTitle = textViewImageCreatorTitle;
    this.textViewImageDateModifiedTitle = textViewImageDateModifiedTitle;
    this.textViewImageDateTakenTitle = textViewImageDateTakenTitle;
    this.textViewImageExposureTimeTitle = textViewImageExposureTimeTitle;
    this.textViewImageFlashTitle = textViewImageFlashTitle;
    this.textViewImageFocalLengthTitle = textViewImageFocalLengthTitle;
    this.textViewImageHeightTitle = textViewImageHeightTitle;
    this.textViewImageIsoTitle = textViewImageIsoTitle;
    this.textViewImageSoftwareTitle = textViewImageSoftwareTitle;
    this.textViewImageTypeTitle = textViewImageTypeTitle;
    this.textViewImageWidthTitle = textViewImageWidthTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PropertiesImageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PropertiesImageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.properties_image, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PropertiesImageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.text_view_image_aperture_value_title;
      TextView textViewImageApertureValueTitle = rootView.findViewById(id);
      if (textViewImageApertureValueTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_camera_brand_title;
      TextView textViewImageCameraBrandTitle = rootView.findViewById(id);
      if (textViewImageCameraBrandTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_camera_model_title;
      TextView textViewImageCameraModelTitle = rootView.findViewById(id);
      if (textViewImageCameraModelTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_creator_title;
      TextView textViewImageCreatorTitle = rootView.findViewById(id);
      if (textViewImageCreatorTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_date_modified_title;
      TextView textViewImageDateModifiedTitle = rootView.findViewById(id);
      if (textViewImageDateModifiedTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_date_taken_title;
      TextView textViewImageDateTakenTitle = rootView.findViewById(id);
      if (textViewImageDateTakenTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_exposure_time_title;
      TextView textViewImageExposureTimeTitle = rootView.findViewById(id);
      if (textViewImageExposureTimeTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_flash_title;
      TextView textViewImageFlashTitle = rootView.findViewById(id);
      if (textViewImageFlashTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_focal_length_title;
      TextView textViewImageFocalLengthTitle = rootView.findViewById(id);
      if (textViewImageFocalLengthTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_height_title;
      TextView textViewImageHeightTitle = rootView.findViewById(id);
      if (textViewImageHeightTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_iso_title;
      TextView textViewImageIsoTitle = rootView.findViewById(id);
      if (textViewImageIsoTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_software_title;
      TextView textViewImageSoftwareTitle = rootView.findViewById(id);
      if (textViewImageSoftwareTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_type_title;
      TextView textViewImageTypeTitle = rootView.findViewById(id);
      if (textViewImageTypeTitle == null) {
        break missingId;
      }

      id = R.id.text_view_image_width_title;
      TextView textViewImageWidthTitle = rootView.findViewById(id);
      if (textViewImageWidthTitle == null) {
        break missingId;
      }

      return new PropertiesImageBinding((LinearLayout) rootView, textViewImageApertureValueTitle,
          textViewImageCameraBrandTitle, textViewImageCameraModelTitle, textViewImageCreatorTitle,
          textViewImageDateModifiedTitle, textViewImageDateTakenTitle,
          textViewImageExposureTimeTitle, textViewImageFlashTitle, textViewImageFocalLengthTitle,
          textViewImageHeightTitle, textViewImageIsoTitle, textViewImageSoftwareTitle,
          textViewImageTypeTitle, textViewImageWidthTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
