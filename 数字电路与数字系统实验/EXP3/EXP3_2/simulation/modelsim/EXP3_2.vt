// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/16/2020 19:35:13"
                                                                                
// Verilog Test Bench template for design : EXP3_2
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module EXP3_2_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg [3:0] a;
reg [3:0] b;
reg [2:0] sel;
// wires                                               
wire cf;
wire [3:0]  mb;
wire of;
wire [3:0]  result;

integer i;
integer j;
integer k;
// assign statements (if any)                          
EXP3_2 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cf(cf),
	.mb(mb),
	.of(of),
	.result(result),
	.sel(sel)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin 
  for(i = 0; i <= 7; i = i + 1)                        
    for(j = 0; j <= 15; j = j + 1)
      for(k = 0; k <= 15; k = k + 1)
      begin 
		  sel = i; a = j; b = k; #10;	
		end 
// --> end                                             
//$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule

